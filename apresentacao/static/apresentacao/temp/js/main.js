$(document).ready(function(){
	$('a[data-trigger]').trigger('click');
});

$(document).on('click', 'a[data-get]', function(e){
	e.preventDefault();

	var el = $(this);
	var href = el.attr('data-get');

	if (el.attr('data-activate')){		
		if (el.hasClass('active')){

		}else{			
			other_els = $('a[data-activate]');
			other_els.removeClass('active');
			el.addClass('active');

			$.get(href, function(data){
				if(el.attr('data-target')){
					$(el.attr('data-target')).fadeOut(0, function() {
						$(el.attr('data-target')).html(data);
					}).fadeIn(0);		
				}	
			}).complete(function(data){
				if (el.attr('data-callback')){
					callback = el.attr('data-callback');
					
					if (callback == 'resize-info'){
						info_height = $('.info').height();
						control_height = $('.control').height();
						
						if (control_height > info_height){
							$('.info').css('minHeight', control_height);
						} else {
							$('.text').css('minHeight', info_height);
						}
					}
				}
			});
		}
	}else{
		$.get(href, function(data){
			if(el.attr('data-target')){
				$(el.attr('data-target')).fadeOut(0, function() {
					$(el.attr('data-target')).html(data);
				}).fadeIn(0);		
			}	
		}).complete(function(data){
			if (el.attr('data-callback')){
				callback = el.attr('data-callback');
				
				if (callback == 'resize-info'){
					info_height = $('.info').height();
					control_height = $('.control').height();
					
					if (control_height > info_height){
						$('.info').css('minHeight', control_height);
					} else {
						$('.text').css('minHeight', info_height);
					}
				}
			}
		});		
	}
});

$(document).on('keypress', 'input[data-search]', function() {
	el = $(this);

	if (el.val() != ''){
		href = el.attr('data-search') + el.val() + '/';

		$.get(href, function(data){
			if (el.attr('data-target')){
				$(el.attr('data-target')).html(data);
			}
		});
	} else {
		href = el.attr('data-search') + '!/';

		$.get(href, function(data){
			if (el.attr('data-target')){
				$(el.attr('data-target')).html(data);
			}
		});
	}	
});

$(document).on('focusout', 'input[data-search]', function() {
	el = $(this);

	if (el.val() != ''){
		href = el.attr('data-search') + el.val() + '/';

		$.get(href, function(data){
			if (el.attr('data-target')){
				$(el.attr('data-target')).html(data);
			}
		});

		if (el.attr('id') == 'top-search'){
			target_el = $('#collectaneas');

			$('html, body').animate({
					scrollTop: target_el.offset().top - 71
				}, 'slow'
			)
		}
	} else {
		href = el.attr('data-search') + '!/';

		$.get(href, function(data){
			if (el.attr('data-target')){
				$(el.attr('data-target')).html(data);
			}
		});
	}

		
});

$(document).on('click', 'a[data-scrollTo]', function(ev){
	ev.preventDefault();

	target_el = $('#' + $(this).attr('data-scrollTo'));

	$('html, body').animate({
			scrollTop: target_el.offset().top - 71
		}, 'slow'
	)
});

$(window).load(function() {
	$('.flexslider').flexslider({
		namespace: "flex-",             //{NEW} String: Prefix string attached to the class of every el generated by the plugin
		selector: ".slides > li",       //{NEW} Selector: Must match a simple pattern. '{container} > {slide}' -- Ignore pattern at your own peril
		animation: "fade",              //String: Select your animation type, "fade" or "slide"
		easing: "swing",               //{NEW} String: Determines the easing method used in jQuery transitions. jQuery easing plugin is supported!
		direction: "horizontal",        //String: Select the sliding direction, "horizontal" or "vertical"
		reverse: false,                 //{NEW} Boolean: Reverse the animation direction
		animationLoop: true,             //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
		smoothHeight: false,            //{NEW} Boolean: Allow height of the slider to animate smoothly in horizontal mode  
		startAt: 0,                     //Integer: The slide that the slider should start on. Array notation (0 = first slide)
		slideshow: true,                //Boolean: Animate slider automatically
		slideshowSpeed: 7000,           //Integer: Set the speed of the slideshow cycling, in milliseconds
		animationSpeed: 600,            //Integer: Set the speed of animations, in milliseconds
		initDelay: 0,                   //{NEW} Integer: Set an initialization delay, in milliseconds
		randomize: false,               //Boolean: Randomize slide order
		 
		// Usability features
		pauseOnAction: true,            //Boolean: Pause the slideshow when interacting with control els, highly recommended.
		pauseOnHover: true,            //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
		useCSS: true,                   //{NEW} Boolean: Slider will use CSS3 transitions if available
		touch: true,                    //{NEW} Boolean: Allow touch swipe navigation of the slider on touch-enabled devices
		video: false,                   //{NEW} Boolean: If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches
		 
		// Primary Controls
		controlNav: true,               //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
		directionNav: false,             //Boolean: Create navigation for previous/next navigation? (true/false)
		prevText: "Previous",           //String: Set the text for the "previous" directionNav item
		nextText: "Next",               //String: Set the text for the "next" directionNav item
		 
		// Secondary Navigation
		keyboard: true,                 //Boolean: Allow slider navigating via keyboard left/right keys
		multipleKeyboard: false,        //{NEW} Boolean: Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
		mousewheel: false,              //{UPDATED} Boolean: Requires jquery.mousewheel.js (https://github.com/brandonaaron/jquery-mousewheel) - Allows slider navigating via mousewheel
		pausePlay: false,               //Boolean: Create pause/play dynamic el
		pauseText: 'Pause',             //String: Set the text for the "pause" pausePlay item
		playText: 'Play',               //String: Set the text for the "play" pausePlay item
		 
		// Special properties
		controlsContainer: ".flexslider-control-nav",          //{UPDATED} Selector: USE CLASS SELECTOR. Declare which container the navigation els should be appended too. Default container is the FlexSlider el. Example use would be ".flexslider-container". Property is ignored if given el is not found.
		manualControls: ".controls li",             //Selector: Declare custom control navigation. Examples would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of els in your controlNav should match the number of slides/tabs.
		sync: "",                       //{NEW} Selector: Mirror the actions performed on this slider with another slider. Use with care.
		asNavFor: "",                   //{NEW} Selector: Internal property exposed for turning the slider into a thumbnail navigation for another slider
		 
		// Carousel Options
		itemWidth: 0,                   //{NEW} Integer: Box-model width of individual carousel items, including horizontal borders and padding.
		itemMargin: 0,                  //{NEW} Integer: Margin between carousel items.
		minItems: 0,                    //{NEW} Integer: Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
		maxItems: 0,                    //{NEW} Integer: Maxmimum number of carousel items that should be visible. Items will resize fluidly when above this limit.
		move: 0,                        //{NEW} Integer: Number of carousel items that should move on animation. If 0, slider will move all visible items.
		                                 
		// Callback API
		start: function(){},            //Callback: function(slider) - Fires when the slider loads the first slide
		before: function(){},           //Callback: function(slider) - Fires asynchronously with each slider animation
		after: function(){},            //Callback: function(slider) - Fires after each slider animation completes
		end: function(){},              //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)
		added: function(){},            //{NEW} Callback: function(slider) - Fires after a slide is added
		removed: function(){}           //{NEW} Callback: function(slider) - Fires after a slide is removed
	});
});

$(window).load(function() {
  $('.banner').flexslider({
    animation: "fade",
  });
});